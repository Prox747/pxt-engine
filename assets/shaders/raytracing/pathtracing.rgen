#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

// Include the global UBO definition
#include "../ubo/global_ubo.glsl"
#include "../common/ray.glsl"
#include "../common/random.glsl"


// Define the ray payload structure. This struct is passed between shader stages.
// The layout(location = 0) specifies the location for the payload.
layout(location = 0) rayPayloadEXT struct RayPayload {
    // Accumulated color and energy along the path.
    vec3 radiance;

    // The accumulated material reflectance/transmittance. It's multiplied at each bounce.
    vec3 throughput;

    // Current number of bounces. Used to limit path length and for Russian Roulette.
    int depth;

    // The origin of the ray in world space.
    vec3 origin; 

    // The direction of the ray in world space.
    vec3 direction;

    // A flag to signal that the path has been terminated (e.g., hit the sky, absorbed).
    bool done;

    // A seed for the random number generator, updated at each bounce.
    uint seed;
} payload;

// Declare the top-level acceleration structure (TLAS)
layout(set = 1, binding = 0) uniform accelerationStructureEXT TLAS;

// Declare the output storage image
// The format qualifier (e.g., rgba8, rgba32f) should match how the image was created in Vulkan.
// rgba8 is common for 8-bit per channel normalized output. Use rgba32f for HDR float output.
layout(set = 3, binding = 0, rgba8) uniform image2D outputImage;

void main()
{
    // gl_LaunchIDEXT is the pixel coordinate (x, y, z) of the current invocation.
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);

    // gl_LaunchSizeEXT is the total number of ray generation invocations (width, height, depth).
    const vec2 imageDimensions = vec2(gl_LaunchSizeEXT.xy);

    vec3 finalColor = vec3(0.0);

    const uint samplesPerPixel = 5;
    const int maxBounces = 15;

    for (uint currentSample = 0; currentSample < samplesPerPixel; currentSample++) {
        uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, uint(ubo.frameCount));

        // Normalized device coordinates (NDC), converted to [-1, 1] range (NDC space)
        vec2 jitter = vec2(randomFloat(seed), randomFloat(seed)) - 0.5;
        vec2 pixelPos = pixelCenter + jitter;
        
        // Normalized device coordinates
        const vec2 ndc = pixelPos / imageDimensions * 2.0 - 1.0;

        // Ray origin and direction in camera/view space
        // Assuming perspective projection
        vec4 rayOriginView = vec4(0.0, 0.0, 0.0, 1.0);
        vec4 rayTargetView = /*ubo.inverseProjectionMatrix*/ inverse(ubo.projectionMatrix) * vec4(ndc.x, ndc.y, 1.0, 1.0); // Point on far plane

        // Transform ray to world space
        Ray worldRay;
        // Camera position in world space
        worldRay.origin = (ubo.inverseViewMatrix * rayOriginView).xyz; 
        worldRay.direction = normalize((ubo.inverseViewMatrix * vec4(normalize(rayTargetView.xyz / rayTargetView.w), 0.0)).xyz);
    
        // Ray parameters
        uint rayFlags = gl_RayFlagsOpaqueEXT; // Assume opaque geometry for now
        uint cullMask = 0xFF;                 // Standard cull mask
        float tMin    = 0.001;                // Minimum intersection distance
        float tMax    = 10000.0;              // Maximum intersection distance

        payload.radiance = vec3(0.0);
        payload.throughput = vec3(1.0);
        payload.origin = worldRay.origin;
        payload.direction = worldRay.direction;
        payload.depth = 0;
        payload.done = false;
        payload.seed = seed;

        // while hangs some GPUs for some reason
        while(!payload.done && payload.depth < maxBounces) {
            traceRayEXT(
                TLAS,               // Top-level acceleration structure
                rayFlags,           // Ray flags
                cullMask,           // Cull mask
                0,                  // SBT record offset for raygen shader (usually 0)
                0,                  // SBT record stride for raygen shader (usually 0)
                0,                  // Miss shader index (which miss shader in the SBT to use)
                payload.origin,     // Ray origin
                tMin,               // Ray min distance
                payload.direction,  // Ray direction
                tMax,               // Ray max distance
                0                   // Payload location (must match the rayPayloadEXT layout location)
            );
        }

        finalColor += payload.radiance;
    }

    finalColor /= samplesPerPixel;

    if (ubo.accumulationEnabled) {
        vec3 previousColor = imageLoad(outputImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
        float weight = 1.0 / float(ubo.ptAccumulationCount);
        finalColor = mix(previousColor, finalColor, weight);
    }

    finalColor = saturate(finalColor);
    if (isnan(finalColor.r) || isnan(finalColor.g) || isnan(finalColor.b) ||
        isinf(finalColor.r) || isinf(finalColor.g) || isinf(finalColor.b)) {
        finalColor = vec3(1.0, 0.0, 1.0); // Magenta for error
    }
    
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0));
}